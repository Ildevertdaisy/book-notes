FastAPI => a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints

REST API => an architectural style and a set of constraints that are usually applied when creating web services

API => application programming interface, the brain of the system, implements the business logic

HTTP requests and responses => the cardiovascular system of the web, how data flows in and out of the system

Path and query parameters => a way to specify which resource an API request is asking for

Type hinting => a feature in Python that allows you to indicate the type of a variable

Annotations => a way to specify metadata about a variable or function

Async await syntax => a way to write asynchronous code in Python

Form data => data that is sent in the request body in the format of key-value pairs

Routers => a way to organize and group related endpoints in a FastAPI application.


Python => a programming language widely used for web development, data analysis, artificial intelligence, and scientific computing.

FastAPI => a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.

REST API => a set of rules for creating web services that allow communication between different systems over the internet.

HTTP requests => the process of sending a request to a server to retrieve data or perform an action.

HTTP responses => the data sent back to the client from the server in response to an HTTP request.

Type hinting => a feature in Python that allows developers to indicate the expected data type of a variable or function parameter.

Annotations => a feature in Python that allows developers to add metadata to variables, functions, and classes.

Async/await syntax => a feature in Python that allows developers to write asynchronous code, which allows for multiple tasks to be executed concurrently.

Path and query parameters => a way to provide input to an API by including them in the URL.

Headers => metadata sent with an HTTP request or response that contains information about the request or response.

Cookies => small pieces of data stored by a website in a user's browser.

Form data => data submitted through an HTML form, used for sending data to a server.

Routers => a way to organize and structure an API by grouping related endpoints together.


Virtual environments => Isolated Python environments that include a copy of the Python interpreter and packages, allowing for different versions of Python and packages to coexist on a single machine without interfering with each other.

Creating virtual environments => To create a virtual environment, head to an application directory and run the command "python -m venv venv" to create a new directory named "venv" that includes a Python executable and packages.

Activating virtual environments => To activate a virtual environment, navigate to the "venv" directory and type "activate" in the Scripts folder. The command prompt will change and be prepended with the name of the active environment in parenthesis.

Git => A version control system for tracking changes in computer files and coordinating work on those files among multiple people.

Shell programs => Programs that allow you to interact with your computer's operating system, such as Windows PowerShell or Commander for Windows.

Visual Studio Code => A popular code editor from Microsoft that is cross-platform, provides integrated tools, lightweight, and has many plugins suitable for various programming tasks.


REST API : A set of rules that developers follow when they create their API. It stands for Representational State Transfer. It is typically a web-based API that returns data in JSON or XML format.
Visual Studio Code : A cross-platform code editor developed by Microsoft. It provides a lot of integrated tools and is popular among developers.
Postman : A REST client that is used for testing APIs. It is one of the most sophisticated and customizable program for testing APIs.
Insomnia : A GUI REST client with a clean and simple interface that is used for testing APIs.
HTTPie : A command-line REST API client that allows testing of endpoints without leaving the shell. It provides an expressive and simple syntax and can handle forms and uploads, sessions, and so on.
Virtual environment : A tool used to create isolated Python environments to avoid dependency conflicts between different projects.

Virtual environment => A virtual environment is a tool used to isolate specific Python environments on a single machine, in order to manage dependencies and versions for different projects.

FastAPI => A modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.

Uvicorn => A lightning-fast ASGI server, built on uvloop and httptools. Recommended for serving FastAPI applications.

ASGI => Asynchronous Server Gateway Interface, a specification for asynchronous web servers, applications, and middleware.

Dependencies => Required packages or libraries that a software application needs in order to function properly.

REST clients => Tools used to test and interact with REST APIs, such as Postman and Insomnia.

HTTPie => A command-line HTTP client, similar to cURL, which makes it easy to send HTTP requests and inspect responses.

Activating virtual environment => Activating a virtual environment sets the environment's Python and packages as the defaults, allowing you to run Python and install packages without affecting other environments.

FastAPI: A modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.
Starlette: A lightweight web framework for building asynchronous web applications with Python.
Pydantic: A data validation and settings management using Python type hints.
Type Hinting: A feature in Python 3.5+ that allows developers to indicate the types of variables and function arguments and return values using special syntax.
ASGI: Asynchronous Server Gateway Interface, an interface specification for asynchronous web servers and applications in Python.
Uvicorn: A lightning-fast ASGI server, recommended by FastAPI for serving web applications.
FARM stack: A collection of technologies and frameworks used to build web applications, including FastAPI for the API, React for the frontend, and MongoDB for the database.

Starlette: An ASGI framework that is fast and provides many features such as WebSocket support, events, session and cookie support, background tasks, middleware, templates and more. It is the foundation of FastAPI and it is useful to know how it works under the hood.

Python type hinting => A feature in Python version 3.5 to provide developers with the opportunity to check the types of the variables before runtime.
Type annotations => Variables, functions, and classes can be annotated to give indications of the types that are expected.
Static type checkers => Validate the code and check if it is consistent with the annotations.
Code editors and IDEs => Will be able to provide autocomplete features, thus speeding up coding.
Mypy => Provides helpful error warnings.
Syntax => Using a colon, :, for variable types and an arrow, ->, for return type.
Typing module => Hosts numerous data structures such as dictionaries or lists that can be used to specify more complex types.

Pydantic => A Python library for data validation and parsing library, which enforces type hints at runtime and provides user-friendly errors.
Virtual environment => Pydantic can be installed by using pip in a newly created virtual environment.
Data models or schemas => Specifies how data must be structured, what fields should be present, what their types are, which are required and if they should have default values.
Validation => Pydantic allows to explicitly define the expected type and validate and parse output data as well.
BaseModel class => The class to kickstart all of the schemas, inherited by all the models.
Enumeration => A way to define admissible types of fuel.
json() method => Pydantic provides a json() method to output data in a nicely formatted JSON file.

Asynchronous I/O => A programming paradigm where slow operations such as network calls and reading files from disk are run in parallel, allowing the system to respond to other calls and then return the appropriate response of the long-running process, while not blocking the other, less time-consuming responses.
Event loop => Manager of asynchronous tasks that receives requests and can move to the next one, even though the previous one hasnâ€™t finished and yielded a response.
Python 3.4 => Added support for asynchronous I/O programming.
async/await => keywords introduced in Python 3.6
ASGI => Specification that outlines how applications should be structured and called and defines the events that can be sent and received.
FastAPI => Rely on ASGI and returns an ASGI-compatible app
Coroutines => Functions with the async keyword prepended, run on the event loop.
Motor => An async driver for MongoDB.

FastAPI => A REST API framework of choice
HTTP protocol => Communication occurs via the HTTP protocol, through HTTP requests and responses.
Uvicorn => The server that will be used in all the examples.
URLs and paths => The basis of any REST API communication.
HTTP verbs => Actions that can be performed on a URL or path, such as GET, POST, PUT, DELETE.
Decorators => In FastAPI, HTTP verbs are implemented as Python decorators.
Data-resource operations => FastAPI encourages the proper use of HTTP verbs concerning the data-resource operations that they perform.
HTTP messages => Consist of a request/status line, headers, and, optionally, body data.
Request/response => FastAPI offers tools to easily create and modify headers, set response codes, and do pretty much anything that we please with the request and response body.


Endpoints => Unique combination of a URL, a path, and an HTTP method.
FastAPI => Structures the endpoints similar to Flask, exposes decorators for HTTP methods to enable the application to respond.
Application object => Instantiated using the FastAPI class, provides all the functionality of the API and exposes an ASGI-compatible application.
Decorators => @get decorator corresponds to the GET method and is used to pass a URL.
Root function => Responsible for accepting any arguments and responding.
Uvicorn => ASGI-compatible web server, used to run the live server with the command "uvicorn chapter3_first_endpoint:app --reload"
Reload flag => Tells Uvicorn to reload the server each time the code is saved, similar to Nodemon.
HTTPie => A command line tool for testing the endpoint, returns a 200 OK status code, content-type is correctly set to application/json and the response is a JSON document.
Insomnia => GUI REST API testing tool, user interface is intuitive and allows you to test endpoints by populating the URL field, specifying the HTTP method, and adding other information to the request.


Automatic documentation: A feature in FastAPI that automatically generates interactive documentation based on the OpenAPI specification, Python hints and the parsing and validation library Pydantic, making it an incredibly useful tool that allows developers to test their API as it is being developed.


REST API: a web architecture and a set of design constraints that are usually applied to web services, it stands for Representational State Transfer.
HTTP protocol: a communication protocol used to transmit data over the internet, it stands for Hypertext Transfer Protocol.
HTTP requests and responses: the basic element of communication in REST APIs, where a client sends a request and the server responds accordingly.
CRUD: an acronym for Create, Read, Update, and Delete, which are the four basic operations that can be performed on a database.
HTTP protocol: a communication protocol used to transmit data over the internet, it stands for Hypertext Transfer Protocol.
HTTP requests and responses: the basic element of communication in REST APIs, where a client sends a request and the server responds accordingly.
Showcase API: an example of an API that is used to demonstrate the functionalities and capabilities of a framework or library.


-Retrieving path and query parameters: The process of getting information from the URL of a request. In FastAPI, this is achieved by defining dynamic path parameters, using standard Python string-formatted dynamic parameters in the path, for example "/car/{id}".
-Type hinting: A feature in Python that allows you to specify the type of a variable, such as int, str, etc. In FastAPI, type hinting is used to ensure that the correct type of data is passed to an endpoint, and if the wrong type is passed, an error message is returned.
-Order matters: The order in which endpoints are defined in the code is important, as it determines the order in which the routes are matched. In situations where similar paths are used, it's important to remember that the first endpoint defined will be matched first.


FastAPI - a web framework for building APIs with Python
Endpoint - a unique combination of an URL, a path, and an HTTP method
ASGI - Asynchronous Server Gateway Interface, a web server interface that enables asynchronous web applications
Uvicorn - an ASGI-compatible web server
OpenAPI - an open-source specification for defining and describing RESTful APIs
Pydantic - a library for data validation and settings management using Python type hints
HTTP request-response cycle - the process of sending requests and receiving responses using the HTTP protocol
Path parameter - a dynamic parameter in the URL that can be anything
Query parameter - a parameter added in the URL after a question mark (?)
Request body - the data sent from the client to an API
Response body - the data sent from an API server to a client
CRUD - Create, Read, Update, and Delete operations
JSON - JavaScript Object Notation, a lightweight data-interchange format
MongoDB - a cross-platform document-oriented database program
Pydantic models - a way to enforce a certain structure for request bodies in FastAPI using Pydantic library

REST APIs: refers to the architectural style of building web services that use HTTP requests to POST (create), PUT (update), GET (read), and DELETE (delete) data.
HTTP protocol: The language of the web, which is used to communicate between a client and a server.
CRUD operations: Create, Read, Update and Delete operations on data.
Request body: The data sent from the client to an API server, usually in the form of a JSON document.
Response body: The data sent from an API server to the client.
Pydantic models: Used to validate and enforce a certain structure for request bodies in FastAPI.
Request object: The raw request object in FastAPI, which is a Starlette request object and can be accessed in functions.


Headers: Header parameters are handled in a similar way to query and path parameters, and we can collect them using the Header function.
Cookies: Cookies work in a similar way as headers and can be extracted manually from the Cookies header, but the framework offers a utility function, named Cookie, that does all the work in a way similar to Query, Path, and Header.
Forms (and files): There are cases that require a different data encoding, forms might be processed directly by your API, with data encoded as multipart/form-data or form-urlencoded. The Form function works similarly to the previously examined utility functions, but with the difference that it looks for form-encoded parameters.
File Upload: We can handle file uploads with the UploadFile utility class and File function. To save the image to a disk, we need to copy the buffer to a file on the disk.


