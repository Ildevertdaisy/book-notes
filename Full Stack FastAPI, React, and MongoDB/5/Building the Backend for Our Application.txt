Introducing our app => The goal of this chapter is to build a complete FastAPI backend with CRUD functionality for a simple application that deals with cars entities.
Creating a MongoDB instance for our app => Connecting to an instance of MongoDB and learning about Python drivers to create a database for the application.
Creating our FastAPI backend => Building the backend with FastAPI and creating Pydantic models for the data.
Deployment to Heroku => Deploying the backend to Heroku, a platform-as-a-service.
Connect asynchronously to our database => Connecting to the database in an asynchronous way.
Create Pydantic models for our data => Defining the data structure for the application using Pydantic models.
Make a more manageable application structure with APIRouter => Creating a more organized and manageable structure for the application using APIRouter.
Define path operations for our CRUD functionality => Setting up the CRUD operations for the API.
Introduce FastAPI middleware => Using middleware to enable the backend to connect to the frontend.

Introducing our app: This section introduces the idea of creating a FARM stack app for a company that sells used cars, which will be used internally for the management of car ads. The app should be able to store and provide data about the cars and offer basic CRUD functionality.
Creating a MongoDB instance for our app: This section covers the process of setting up a MongoDB instance for the app, including creating a new database, defining a collection, and obtaining the connection string information. It also mentions the importance of keeping the connection string information safe and not committing it to GitHub repositories.
Creating our FastAPI backend: This section covers the process of creating the FastAPI backend for the app, including breaking the app into routes with the FastAPI router, handling multiple groups of URLs, creating pydantic models for cars, and creating routes for basic operations like creating, updating, deleting, and reading cars.
Deployment to Heroku: This section covers the process of deploying the backend to Heroku, a platform-as-a-service.

FastAPI => a web framework for building APIs with Python
APIRouter => a module in FastAPI designed to handle a group of path operations related to a single type of object
APIRouter nesting => ability to manage complex hierarchies of endpoints in a straightforward manner
Endpoints => specific routes for a web application to respond to client requests
Routers => a way to organize and separate endpoint logic in a web application
Prefix => a way to specify a URL path that a specific router should handle
Tags => a way to group endpoints in the OpenAPI documentation
MongoDB => a NoSQL database that can be used with FastAPI to store data

Cross-origin resource sharing (CORS) => policy applied when a backend (FastAPI) communicates with a frontend (React) on different origins
Middleware => a set of functions that run on every request and tap into the request/response cycle to manipulate the request and response
ASGI specification => specification that middleware is based on and is implemented in Starlette
FastAPI middleware => a way to use middleware in all routes and tie it to a part of an application (via APIRouter) or the entire app
CORSMiddleware => middleware in FastAPI that allows certain origins to make requests to the API
origins => the domains that are allowed to make requests to the API
allow_credentials => whether to allow requests with credentials
allow_methods => the HTTP methods that are allowed
allow_headers => the headers that are allowed in requests
MongoDB => a NoSQL database that can be used with FastAPI to store data

Heroku => a platform-as-a-service (PaaS) for the deployment and management of applications
Dynos => virtualized containers for applications that are scalable and run Linux in isolated environments
Heroku CLI => a command line tool that enables easy deployment of FastAPI apps to Heroku
Git => a version control system used to deploy apps to Heroku
Procfile => a file that tells Heroku what process(es) to run for deployment
requirements.txt => a file that lists the necessary Python libraries for a project, used by Heroku to collect and run them
Heroku account => an account necessary to use Heroku, which can be created for free with a valid email address


